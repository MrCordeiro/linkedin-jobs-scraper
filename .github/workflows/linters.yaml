name: Linters

on:
  push:
    branches:
      - "main"
      - "master"
  pull_request:
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: 3.11

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  pull-requests: write
  issues: write
  repository-projects: write
  contents: read

jobs:

  isort:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '${{ env.PYTHON_VERSION }}'
      - run: |
          python -m pip install --upgrade pip
          python -m pip install isort
      - name: isort
        uses: liskin/gh-problem-matcher-wrap@v2
        with:
          linters: isort
          run: isort --check --diff job_scrapper

  black:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: black
        uses: psf/black@stable

  flake8:
    name: flake8
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '${{ env.PYTHON_VERSION }}'
      - run: |
          python -m pip install --upgrade pip
          python -m pip install flake8
      - name: flake8
        uses: liskin/gh-problem-matcher-wrap@v2
        with:
          linters: flake8
          run: flake8 --max-line-length=88 --extend-ignore=E203 job_scraper

  mypy:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '${{ env.PYTHON_VERSION }}'
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install mypy
        run: |
          python -m pip install --upgrade pip
          pip install mypy
      - name: Run mypy
        uses: liskin/gh-problem-matcher-wrap@v2
        with:
          linters: mypy
          run: mypy --install-types job_scraper/

  pylint:
    name: pylint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '${{ env.PYTHON_VERSION }}'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pylint
          pip install poetry
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          pip install -r requirements.txt
      - name: Run pylint
        run: pylint job_scraper --rcfile=pyproject.toml
